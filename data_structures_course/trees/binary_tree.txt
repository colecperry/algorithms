Binary Tree - a tree where every node has at most two children

It consists of:
    - A root node
    - Each node may have zero, one, or two children
    - The structure continues recursively down the tree

As opposed to the binary search tree which has an ordering rule where left subtree < Node < right subtree, a binary tree has no ordering rule. This is not great for searching efficiency! Also, a binary tree may or may not allow duplicates, as to where a binary search tree does not allow duplicates

- Big O of searching a binary tree: At worst case O(n) vs a Binary Search Tree (O(log n))

Example:
        A
       / \
      B   C
     / \   \
    D   E   F


Other notes about trees:
    - Directed: one way links between nodes (no cycles)
    - Acyclic - no path wraps around the same node twice
    - Edge - directed link between nodes
    - Root - the start of the tree, the top most node
    - Parent - any node with at least one child
    - Child - any node with a Parent
    - Siblings - all nodes at the same level
    - Internal node - a node with at least one child (except root)
    - Leaf node - a node without children
    - Path - a sequence of edges that connects two nodes
    - Node level - the number of edges along the unique path between that node and the root
    - Height - the length of the longest path from the node to some leaf (height of any leaf node is 0)
    - Tree height - the number of levels of the tree -1
    - Balanced - the heights of all left and right subtrees differ by at most 1

What is not a tree?
     - Cycles: there is a cycle in the tree (node points at itself)
     - Multiple parents - node 3 has multiple parents on different levels
     - Disconnected components - there are two unconnected groups of nodes
